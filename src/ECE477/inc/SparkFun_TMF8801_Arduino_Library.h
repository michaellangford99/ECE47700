/*
  This is a library written for the AMS TMF-8801 Time-of-flight sensor
  SparkFun sells these at its website:
  https://www.sparkfun.com/products/17716

  Do you like this library? Help support open source hardware. Buy a board!

  Written by Ricardo Ramos  @ SparkFun Electronics, February 15th, 2021
  This file is the core of the TMF-8801 ToF sensor library.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __TMF8801_LIBRARY__
#define __TMF8801_LIBRARY__

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>
#include "SparkFun_TMF8801_Constants.h"
#include "SparkFun_TMF8801_IO.h"

typedef struct
{
  uint8_t range_status;
// uint8_t report_status: not used
  uint8_t stream_count;
  uint16_t dss_actual_effective_spads_sd0;
// uint16_t peak_signal_count_rate_mcps_sd0: not used
  uint16_t ambient_count_rate_mcps_sd0;
// uint16_t sigma_sd0: not used
// uint16_t phase_sd0: not used
  uint16_t final_crosstalk_corrected_range_mm_sd0;
  uint16_t peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
} ResultBuffer_t2;

typedef struct
{
  uint16_t range_mm;
  uint8_t range_status;
  float peak_signal_count_rate_MCPS;
  float ambient_count_rate_MCPS;
} RangingData_t2;

/*typedef struct{

  RangingData_t2 dev_ranging_data;
  uint8_t dev_last_status; // status of last I2C transmission

  // making this static would save RAM for multiple instances as long as there
  // aren't multiple sensors being read at the same time (e.g. on separate
  // I2C buses)
  ResultBuffer_t2 dev_results;

  uint8_t dev_address;

  uint16_t dev_io_timeout;
  bool dev_did_timeout;
  uint16_t dev_timeout_start_ms;

  uint16_t dev_fast_osc_frequency;
  uint16_t dev_osc_calibrate_val;

  bool dev_calibrated;
  uint8_t dev_saved_vhv_init;
  uint8_t dev_saved_vhv_timeout;
} */


//class TMF8801
typedef struct
{
	// CMD_DATA_7 to CMD_DATA_0 values used by updateCommandData8 function
	// CMD_DATA_7 is commandDataValues[0], CMD_DATA_6 is commandDataValues[1] and so forth...
	uint8_t commandDataValues[8];

	// Sample number
	uint8_t resultNumber;

	// Hold result status like measurement status and reliability
	uint8_t resultInfo;

	// Distance in millimeters
	int distancePeak;

	// I2C address
	uint8_t address;

	// I2C communication object instance
	uint16_t tmf8801_io;

	// Holds last error generated by a function call
	uint8_t lastError;

	// Default GPIO1 mode. You can find allowed values in SparkFun_TMF8801_Constants.h
	uint8_t gpio1_prog;

	// Default GPIO1 mode. You can find allowed values in SparkFun_TMF8801_Constants.h
	uint8_t gpio0_prog;

	// Calibration data. Can be overwritten.
	uint8_t calibrationData[14];

}TMF8801_t;


TMF8801_t* activeDev;

void init_TMF8801(TMF8801_t* dev);

void read_distance(TMF8801_t* dev);

void update_TMF8801(TMF8801_t* dev);
uint16_t get_distance_TMF8801(TMF8801_t* dev);

//Initializes STM32F446 and TMF8801
bool _TMF8801_init(TMF8801_t* dev);

// Polls if TMF8801's CPU is ready
bool cpuReady();

// Polls if TMF8801's application is ready
bool applicationReady();

// Measures distance
void doMeasurement();

// Updates registers CMD_DATA_7 to CMD_DATA_0 with commandDataValues array
void updateCommandData8();

// Initializes TMF8801
bool begin(uint8_t address);

// Checks if TMF8801 has available data
bool dataAvailable();

// Polls if TMF8801 is connected and if chip ID matches TMF8801 chip id.
bool isConnected();

// Get TMF8801 status
uint8_t getStatus();

// Get last error
uint8_t getLastError();

// Returns distance in mm
int getDistance();

// Enable interrupt generation on each measurement
void enableInterrupt();

// Disable interrupt generation on each measurement
void disableInterrupt();

// Marks interrupt flag as processed
void clearInterruptFlag();

// Returns true if measurement is enabled
bool measurementEnabled();

// Sets GPIO0 mode - You can find allowed values in SparkFun_TMF8801_Constants.h
void setGPIO0Mode(uint8_t gpioMode);

// Returns current GPIO0 mode - You can find returned values in SparkFun_TMF8801_Constants.h
uint8_t getGPIO0Mode();

// Sets GPIO1 mode - You can find allowed values in SparkFun_TMF8801_Constants.h
void setGPIO1Mode(uint8_t gpioMode);

// Returns current GPIO1 mode - You can find returned values in SparkFun_TMF8801_Constants.h
uint8_t getGPIO1Mode();

// Returns specific register value. Registers' descriptions can be found in TMF8801 datasheet.
uint8_t getRegisterValue(uint8_t reg);

// Sets register value. Registers' descriptions can be found in TMF8801 datasheet.
void setRegisterValue(uint8_t reg, uint8_t value);

// Returns multiples values from register to uint8_t array buffer. No array boundary check is done. Registers' descriptions can be found in TMF8801 datasheet.
void getRegisterMultipleValues(uint8_t reg, uint8_t* buffer, uint8_t length);

// Sets multiple values to register from uint8_t buffer. No array boundary check is done. Registers' descriptions can be found in TMF8801 datasheet.
void setRegisterMultipleValues(uint8_t reg, const uint8_t* buffer, uint8_t length);

// Gets calibration data from TMF8801 to calibrationResults uint8_t array. Size is fixed to 14 uint8_ts.
bool getCalibrationData(uint8_t* calibrationResults);

// Sets calibration data from TMF8801 from newCalibrationData uint8_t array. Size is fixed to 14 uint8_ts.
void setCalibrationData(const uint8_t* newCalibrationData);

// Returns current hardware version number
uint8_t getHardwareVersion();

// Returns major application version number
uint8_t getApplicationVersionMajor();

// Returns minor application version number
uint8_t getApplicationVersionMinor();

// Returns device's serial number
short getSerialNumber();

// Returns measurement reliability. 0 = worse, 63 = best. Check TMF8801 datasheet.
uint8_t getMeasurementReliability();

// Returns measurement status. Check TMF8801 datasheet.
uint8_t getMeasurementStatus();

// Returns current measurement sample number
uint8_t getMeasurementNumber();

// Resets board after specific registers programming
void resetDevice();

// Wakes device up after ENABLE pin is brought back to HIGH
void wakeUpDevice();

uint32_t millis();

// Starts two wire interface.
bool begin(uint8_t address);

// Returns true if we get a reply from the I2C device.
bool isConnectedTMF8801();

// Read a single byte from a register.
uint8_t readSingleByte(uint8_t registerAddress);

// Writes a single byte into a register.
void writeSingleByte(uint8_t registerAddress, uint8_t value);

// Reads multiple bytes from a register into buffer byte array.
void readMultipleBytes(uint8_t registerAddress, uint8_t* buffer, uint16_t packetLength);

// Writes multiple bytes to register from buffer byte array.
void writeMultipleBytes(uint8_t registerAddress, uint8_t* buffer, uint16_t packetLength);

// Sets a single bit in a specific register. Bit position ranges from 0 (lsb) to 7 (msb).
void setRegisterBit(uint8_t registerAddress, uint8_t const bitPosition);

// Clears a single bit in a specific register. Bit position ranges from 0 (lsb) to 7 (msb).
void clearRegisterBit(uint8_t registerAddress, uint8_t bitPosition);

// Returns true if a specific bit is set in a register. Bit position ranges from 0 (lsb) to 7 (msb).
bool isBitSet(uint8_t registerAddress, uint8_t bitPosition);


#endif
